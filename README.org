* JBrowse

<a target="_blank" href="https://jbrowse.org/">JJBrowse</a> is a modern genome browser, replaces GBrowse.
This repository contains instructions to dowload and install JBrowse.  It also contains some external plugins and the source code for VEuPath plugins.  

** Dependencies

   + yarn / npm / ant
   + WEBAPP_PROP_FILE file (file with one property for the webapp target directory)
      webappTargetDir=BLAH

** Installation instructions.

   + bldw JBrowse $WEPAPP_PROP_FILE

** Operating instructions.

   + Installation is successful if you can view the sample data in your browser

   #+begin_example
     $WEBAPP/jbrowse?data=sample_data%2Fjson%2Fvolvox
     $WEBAPP/jbrowse?data=sample_data%2Fjson%2Fyeast
   #+end_example

** manifest

   + bin :: scripts for generating configuration used by apollo.  (move to ApiCommonModel??)
   + patches :: minor modifications to JBrowse src code can be applied here
   + plugins :: css and js for VEuPath Specific Tracks, Glyphs, Themes, ...  Also contains zip files for external plugins
   + build.xml :: ant build instructions
   + package.json :: node js


** Canvas Subtracks and Synteny
   + geneGroupAttributeName ::  An attribute of the features which indicates the group.  Features with the same value for this attribute will be connected with shading.
   + subtracks ::   list which contains "featureFilters" and "metadata" objects.  featureFilters are used to assign features into subtracks and "metadata" is used for configuration/subtrack selection.
   + (For Canvas Subtracks without Synteny Shading simply remove the geneGroupAttributeName and change the type to "EbrcTracks/View/Track/CanvasSubtracks")

*** Example Track Configuration:
   #+begin_example
<pre>
{
 ....
    "type": "EbrcTracks/View/Track/Synteny"
    "geneGroupAttributeName": "orthomcl_name",
    "subtracks": [
        {
            "featureFilters": {
                "SynType": "gene",
                "Taxon": "Plasmodium falciparum 3D7"
            },
            "label": "pfal3D7 gene",
            "metadata": {
                "Class": "Aconoidasida",
                "Genus": "Plasmodium",
                "Kingdom": "N/A",
                "Phylum": "Apicomplexa",
                "Species": "Plasmodium falciparum"
            },
            "visible": true
        },
        {
            "featureFilters": {
                "SynType": "span",
                "Taxon": "Plasmodium falciparum 3D7"
            },
            "label": "pfal3D7 span",
            "metadata": {
                "Class": "Aconoidasida",
                "Genus": "Plasmodium",
                "Kingdom": "N/A",
                "Phylum": "Apicomplexa",
                "Species": "Plasmodium falciparum"
            },
            "visible": true
        }, 
	....
    ]
}
   #+end_example

*** Store

Tested with REST, GFF, NCList which should work fine if you are displaying static alignments.

EbrcTracks plugin provides "EbrcTracks/Store/SeqFeature/REST" which will add 2 query params to the service call (visibleRegionStart and visibleRegionEnd).  This allows the service to do whatever scaling is appropriate for the syntenic region.

***  data workflow in a nutshell

Most of the heavy lifting is done upstream of this plugin.  One possible approach is:

    + Perform all possible pairwise comparisons of genomes and determine all large regions of synteny (we use mercator and MAVID)
    + For each syntenic region, determine the coordinate pairs for each syntenic gene's start to the corresponding gene start in the reference.  
    +Create a REST endpoint which when given an arbitrary region (visibleRegionStart->visibleRegionEnd) can get the min and max coord pair for the region and scale the syntenic locations so they can be shown in reference coordinates.

